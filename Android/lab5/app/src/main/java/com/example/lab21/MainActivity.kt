package com.example.lab21import android.content.ContentValuesimport android.content.Intentimport android.database.DatabaseUtilsimport android.os.Bundleimport android.provider.BaseColumnsimport android.util.Logimport android.widget.ListViewimport android.widget.SimpleAdapterimport android.widget.Toastimport androidx.appcompat.app.AppCompatActivityimport androidx.core.view.isEmptyimport kotlinx.android.synthetic.main.activity_main.*var dataList =ArrayList<HashMap<String,String>>()class MainActivity : AppCompatActivity(){    private var DATA_BASE_HANDLER: DataBaseHandler = DataBaseHandler(this)    private val EMAIL_KEY = "e"    private val PASSWORD_KEY = "p"    override fun onCreate(savedInstanceState: Bundle?)    {        Log.i("AppLogger","onCreate")        super.onCreate(savedInstanceState)        this.setContentView(R.layout.activity_main)        val db = DATA_BASE_HANDLER.writableDatabase        if(dataList.isEmpty())        {            DATA_BASE_HANDLER.restoreData(db, dataList)        }        val simpleAdapter = SimpleAdapter(this, dataList,android.R.layout.simple_list_item_2,            arrayOf(EMAIL_KEY, PASSWORD_KEY), intArrayOf(android.R.id.text1,android.R.id.text2))        listView.adapter = simpleAdapter        simpleAdapter.notifyDataSetChanged()        var idListViewItemClicked: Int = -1        addButton.setOnClickListener()        {            val intent = Intent(this, LoginActivity2::class.java)            startActivity(intent)        }        listView.setOnItemClickListener{parent,view,position,id ->            idListViewItemClicked = position            listView.choiceMode = ListView.CHOICE_MODE_SINGLE        }        button_db_clear.setOnClickListener()        {            //DBContract.DBDeleteStr()            val dbDel = db.delete(DBContract.UserEntry.TABLE_NAME,"1",null)            Toast.makeText(this,"Rows deleted $dbDel",Toast.LENGTH_SHORT).show()            dataList.clear()            simpleAdapter.notifyDataSetChanged()        }        delButton.setOnClickListener()        {            if (listView.isEmpty() || idListViewItemClicked == -1)            {                Toast.makeText(this, "Please, select row", Toast.LENGTH_SHORT).show()            }            else            {                dataList.removeAt(idListViewItemClicked)                val DbId = idListViewItemClicked + 1                // Define 'where' part of query.                val selection = "${BaseColumns._ID} = ?"                // Specify arguments in placeholder order.                val selectionArgs:String = DbId.toString()                // Issue SQL statement.                val deletedRows = db.delete(DBContract.UserEntry.TABLE_NAME, selection,                    arrayOf(selectionArgs))                Toast.makeText(this, "Deleted from table id = $DbId",                    Toast.LENGTH_SHORT).show()                simpleAdapter.notifyDataSetChanged()                idListViewItemClicked = -1            }        }    }    override fun onStart()    {        Log.i("AppLogger", "onStart")        super.onStart()    }    override fun onResume()    {        Log.i("AppLogger","onResume")        super.onResume()        val strEmailIntentExtra: String? = intent.getStringExtra(EMAIL_KEY)        val strPasswordIntentExtra: String? = intent.getStringExtra(PASSWORD_KEY)        val db = DATA_BASE_HANDLER.writableDatabase        if (strPasswordIntentExtra != null && strEmailIntentExtra != null)        {            // Create a new map of values, where column names are the keys            val values = ContentValues().apply {                put(DBContract.UserEntry.COLUMN_NAME_EMAIL, strEmailIntentExtra)                put(DBContract.UserEntry.COLUMN_NAME_PASSWORD, strPasswordIntentExtra)            }            // Insert the new row, returning the primary key value of the new row            val newRowId = db?.insert(DBContract.UserEntry.TABLE_NAME, null, values)            val dbRowsCount = DatabaseUtils.queryNumEntries(db,DBContract.UserEntry.TABLE_NAME)            Toast.makeText(this,"Count of rows: $dbRowsCount",Toast.LENGTH_SHORT).show()        }    }    override fun onPause()    {        Log.i("AppLogger", "onPause")        super.onPause()    }    override fun onStop()    {        Log.i("AppLogger", "onStop")        DATA_BASE_HANDLER.close()        super.onStop()    }    override fun onDestroy()    {        Log.i("AppLogger", "onDestroy")        super.onDestroy()    }}